firstRaster <- raster(xmn = -100,   # set minimum x coordinate
xmx = -60,    # set maximum x coordinate
ymn = 25,     # set minimum y coordinate
ymx = 50,     # set maximum y coordinate
res = c(1,1))
firstRaster
# Assign values to raster
firstRaster[] <- seq(from = 1, to = ncell(firstRaster),by = 1)
firstRaster
plot(firstRaster)
hist(firstRaster,breaks = 40)
plot(firstRaster)
Sys.env()
Sys.Env()
Sys.info()
Sys.environment()
Sys.env
session.info()
SessionInfo()
Session.Info()
SessionInfo
sessionInfo
sessionInfo()
str(sessonInfo())
str(sessionInfo())
str(sessionInfo(),1)
sessionInfo()[c(1:3)]
sessionInfo()[[2]]
sessionInfo()[[1]]
sessionInfo()[[1]]$version.string
htmlwidget::saveWidget(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45)
)
htmlwidgets::saveWidget(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45)
)
htmlwidgets::saveWidget(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45),
file = "C:/Users/Desktop/spinglobe"
)
htmlwidgets::saveWidget(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45),
file = "spinglobe"
)
getwd()
htmlwidgets(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45),
file = "working.html",
selfContained = TRUE)
htmlwidgets::saveWidget(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45),
file = "working.html",
selfContained = TRUE)
htmlwidgets::saveWidget(
threejs::globejs(
img = "C:/Users/hallworthm/Desktop/SRTM_RAMP2_TOPO_2000.png",
value = 1,
bg = "white",
color = "white",
atmosphere=TRUE,
lightcolor = "white",
bodycolor = "white",
emission = "yellow",
fov = 45),
file = "working.html",
selfcontained = TRUE)
download.file
getwd()
download.file(url = "ftp://neoftp.sci.gsfc.nasa.gov/geotiff/MOD_NDVI_16/MOD_NDVI_16_2018-02-02.TIFF",
destfile = "../Spatial_Layers/recentNDVI.TIFF",
extra = getOption("download.file.extra")
)
NDVI <- raster("../Spatial_Layers/MOD_NDVI_16/MOD_NDVI_16_2018-02-02.TIFF")
NDVI <- raster::raster("../Spatial_Layers/MOD_NDVI_16/MOD_NDVI_16_2018-02-02.TIFF")
NDVI <- raster::raster("../Spatial_Layers/recentNDVI.TIFF")
download.file(url = "ftp://neoftp.sci.gsfc.nasa.gov/geotiff.float/MOD_NDVI_16/MOD_NDVI_16_2018-02-02.FLOAT.TIFF",
destfile = "C:/Users/hallworthm/Google_Drive/mhallwor.github.io/Spatial_Layers/NDVI.FLOAT.TIFF",
extra = getOption("download.file.extra"))
NDVI <- raster::raster("../Spatial_Layers/NDVI.FLOAT.TIFF")
NDVI <- raster::raster("C:/Users/hallworthm/Google_Drive/mhallwor.github.io/Spatial_Layers/NDVI.FLOAT.TIFF")
raster::getData("countries")
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
world
raster::plot(world)
raster::plot(world,col = "gray70")
worldROB <- sp::spTransform(world,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs";))
worldROB <- sp::spTransform(world,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
plot(worldROB, col = "gray70")
raster::plot(worldROB, col = "gray70")
sp::gridlines(world, easts = pretty(bbox(x)[1,]), norths = pretty(bbox(x)[2,]),
ndiscr = 100)
sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
graticules <- sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
graticules <- sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
raster::plot(world,col = "gray70")
raster::plot(graticules, add = TRUE)
raster::plot(graticules, col = "gray80")
raster::plot(world,col = "gray70",add = TRUE)
graticules
worldROB <- sp::spTransform(world,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
graticulesROB <- sp::spTransform(graticules,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
raster::plot(graticulesROB, col = "gray80")
raster::plot(worldROB, add = TRUE, col = "gray70")
par(mar = c(0,0,0,0),mfrow = c(2,2))
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
graticules <- sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
raster::plot(graticules, col = "gray80")
raster::plot(world,col = "gray70",add = TRUE)
worldROB <- sp::spTransform(world,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
graticulesROB <- sp::spTransform(graticules,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
raster::plot(graticulesROB, col = "gray80")
raster::plot(worldROB, add = TRUE, col = "gray70")
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=0 +lat_2=40 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=80 +lat_0=40 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=80 +lat_0=50 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=50 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=50 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=0 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-20 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-30 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-90 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(worldConic)
raster::plot(graticulesConic, col = "gray80")
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
graticlesConic <- sp::spTransform(graticules, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(graticulesConic, col = "gray80")
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
graticulesConic <- sp::spTransform(graticules, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(graticulesConic, col = "gray80")
raster::plot(worldConic, col = "gray70", add = TRUE)
world
rgeos::gArea(world[world$NAME=="Greenland"])
rgeos::gArea(world[world$NAME=="Greenland",])
rgeos::gArea(world[world$NAME=="United States",])
rgeos::gArea(worldMOLL[worldMOLL$NAME == "United States",])
par(mar = c(0,0,0,0),mfrow = c(2,2))
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
graticules <- sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
raster::plot(graticules, col = "gray80")
raster::plot(world,col = "gray70",add = TRUE)
worldROB <- sp::spTransform(world,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
graticulesROB <- sp::spTransform(graticules,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
raster::plot(graticulesROB, col = "gray80")
raster::plot(worldROB, add = TRUE, col = "gray70")
worldMOLL <- sp::spTransform(world,sp::CRS("+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
graticulesMOLL <- sp::spTransform(graticules,sp::CRS("+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
raster::plot(graticulesMOLL, col = "gray80")
raster::plot(worldMOLL, col = "gray70", add = TRUE)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
graticulesConic <- sp::spTransform(graticules, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(graticulesConic, col = "gray80")
raster::plot(worldConic, col = "gray70", add = TRUE)
rgeos::gArea(worldMOLL[worldMOLL$NAME == "United States",])
rgeos::gArea(world[world$NAME=="United States",])
rgeos::gArea(worldMOLL[worldMOLL$NAME == "United States",])
rgeos::gArea(worldROB[worldROB$NAME == "United States",])
rgeos::gArea(worldConic[worldConic$NAME == "United States",])
area(world[world$NAME=="United States",])
rgeos::gArea(worldMOLL[worldMOLL$NAME == "Greenland",])
rgeos::gArea(worldROB[worldROB$NAME == "Greenland",])
rgeos::gArea(worldMOLL[worldMOLL$NAME == "Greenland",])
rgeos::gArea(worldConic[worldConic$NAME == "Greenland",])
rgeos::gArea(world[world$NAME=="United States",])
rgeos::gArea(world[world$NAME=="Greenland",])
rgeos::gArea(world[world$NAME=="Greenland",])
rgeos::gArea(worldMOLL[worldMOLL$NAME == "Greenland",])
rgeos::gArea(worldROB[worldROB$NAME == "Greenland",])
rgeos::gArea(worldConic[worldConic$NAME == "Greenland",])
par(mar = c(0,0,0,0),mfrow = c(2,2))
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
graticules <- sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
raster::plot(graticules, col = "gray80",main = "WGS84")
raster::plot(world,col = "gray70",add = TRUE)
par(mar = c(0,0,2,0),mfrow = c(2,2))
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
graticules <- sp::gridlines(world, easts = seq(-180,180,5), norths = seq(-90,90,5))
raster::plot(graticules, col = "gray80",main = "WGS84")
raster::plot(world,col = "gray70",add = TRUE)
raster::getData
raster::getData(name = "countries",
download = TRUE,
version = 2.8)
raster::getData(name = "countries",
download = TRUE,
version = 2.7)
States <- raster::getData(name = "GADM",
country = "United States",
level = 0,
download = TRUE)
plot(States)
raster::plot(States)
raster::getData(name = "GADM",
country = "United States",
level = 1,
download = TRUE)
library(raster)
States <- readRDS("../Spatial_Layers/GADM_2.8_USA_adm1.rds")
States
raster::crs(States)
nameSlots(States)
nameSlot(States)
namesSlot(States)
slotNames(States)
States@proj4string
States@proj4string@projargs
str(States,1)
str(States,2)
sp::spTransform()
sp::spTransform
States_EqArea <- sp::spTransform(x = States,
CRSobj="EPSG::9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj="+EPSG::9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj="+EPSG:9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj="+init=epsg:9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj= CRS("+init=epsg:9820"))
States_EqArea <- sp::spTransform(x = States,
CRS("+init=epsg:9820"))
States_EqArea <- sp::spTransform(x = States,
CRS("Proj4js.defs["ESRI:102008"]"))
States_EqArea <- sp::spTransform(x = States,
CRS("ESRI:102008"))
States_EqArea <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
plot(States_EqArea)
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
EqArea <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
States_EqArea2 <- sp::spTransform(x = States,
CRS(EqArea))
par(mar = c(0,0,0,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea1")
par(mar = c(0,2,0,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea1")
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea1")
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=epsg:102008"))
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=epsg:102008"))
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
# Let's remove Alaska and Hawaii for plotting purposes
States <- States[States$NAME != "Alaska" & States$NAME != "Hawaii",]
States
States$NAME
States
States <- readRDS("../Spatial_Layers/GADM_2.8_USA_adm1.rds")
States
States <- States[States$NAME_1 != "Alaska" & States$NAME_1 != "Hawaii",]
States
crs(States)<-NA
States
crs(States) <- "Totally Awesome projection"
crs(States) <- EqArea
plot(States)
States
crs(States)<-NA
States@proj4string
States@proj4string@projargs <- WGS84
WGS84 <- "+proj=longlat +datum=WGS84
+no_defs +ellps=WGS84 +towgs84=0,0,0"
States@proj4string@projargs <- WGS84
# take a look
States
spTransform(States,CRS(EqArea))
plot(spTransform(States,CRS(EqArea)))
States_EqArea2
States_EqArea1
crs(States_EqArea1)==crs(States_EqArea2)
crs(States_EqArea1)=crs(States_EqArea2)
identicalCRS(States_EqArea1,States_EqArea2)
# Define the proj4 string
EqArea <- "+proj=aea
+lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0
+ellps=GRS80
+datum=NAD83
+units=m +no_defs"
# project using the string
States_EqArea2 <- sp::spTransform(x = States,
CRSobj = CRS(EqArea))
# project using the ESPG authority number
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
sp::identicalCRS(States_EqArea1,States_EqArea2)
States_EqArea2
States_EqArea1
showESPG()
sp::showESPG()
sp::showEPSG()
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
degAxis(side = 1)
par(mar = c(4,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
degAxis(side = 1)
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea2")
library(rgdal)
x_coords <- runif(n = 100, min = -100, max = -80)
y_coords <- runif(n = 100, min = 25, max = 45)
# Have a look at the first coordinates
head(cbind(x_coords,y_coords))
x_coords <- c(-60,-62,-62,-60)
y_coords <- c(20,25,25,20)
Polygon(cbind(x_coords,y_coords))
sp::Polygon(cbind(x_coords,y_coords))
plot(sp::Polygon(cbind(x_coords,y_coords)))
raster::plot(sp::Polygon(cbind(x_coords,y_coords)))
x_coords <- c(-60,-60,-62,-62,-60)
y_coords <- c(20,25,25,20,20)
plot(sp::Polygon(cbind(x_coords,y_coords)))
sp::Polygon(cbind(x_coords,y_coords))
sp::SpatialPolygon(sp::Polygon(cbind(x_coords,y_coords)),id = "A")
sp::SpatialPolygon(list(sp::Polygon(cbind(x_coords,y_coords))),id = "A")
sp::SpatialPolygons(list(sp::Polygon(cbind(x_coords,y_coords))),id = "A")
sp::SpatialPolygons(list(sp::Polygon(cbind(x_coords,y_coords))))
sp::SpatialPolygons(Polygons=list(sp::Polygon(cbind(x_coords,y_coords))))
sp::SpatialPolygons(Polygons=sp::Polygon(cbind(x_coords,y_coords)))
poly1 <- Polygon(cbind(x_coords,y_coords))
poly1 <- polygon(cbind(x_coords,y_coords))
Polygon(cbind(x_coords,y_coords))
poly1 <- sp::Polygon(cbind(x_coords,y_coords))
sp::Polygons(list(poly1),"A")
firstPoly <- sp::Polygons(list(poly1),"A")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly),1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly),"1")
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly),1)
sp::Polygons(list(poly1),"A")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
plot(firstSpatialPoly)
raster::plot(firstSpatialPoly)
firstSptialPoly
firstSpatialPoly
x <- c(-60,-60,-62,-62,-60,-50,-50,-55,-55,-50)
y <- c(20,25,25,20,20,15,25,25,15,15)
poly <- c(rep(1,5),rep(2,5))
# define the vertices
x1 <- c(-60,-60,-62,-62,-60)
x2 <-c(-50,-50,-55,-55,-50)
y1 <- c(20,25,25,20,20)
y2 <- c(15,25,25,15,15)
# assign the vertices to a `polygon`
poly1 <- Polygons(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- sp::Polygons(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- sp::polygon(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- polygon(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- polygon(cbind(x1,y1))
# assign the vertices to a `polygon`
poly1 <- sp::Polygon(cbind(x1,y1))
poly2 <- sp::Polygon(cbind(x2,y2))
Polygons(list(poly1),1)
sp::Polygons(list(poly1),1)
sp::Polygons(list(poly1),"A")
Polygons
sp::Polygons
sp::Polygons(list(poly1), ID = "A")
sp::SpatialPolygons(list(sp::Polygons(list(poly1),ID = "A"),sp::Polygons(list(poly2), ID = "B"))
)
TwoPolys <- sp::SpatialPolygons(list(sp::Polygons(list(poly1),ID = "A"),
sp::Polygons(list(poly2), ID = "B")))
raster::plot(TwoPolys)
TwoPolys
# This looks up the GADM dataset - for the country US and returns
# the first level of administration which in this case is state boundaries.
States <- raster::getData("GADM", country = "United States", level = 1)
# Have a look at the data
States
States
plot(States)
plot(States)
# load library
library(sp)
# Make a set of coordinates that represent vertices
# with longitude and latitude in the familiar
# degrees
x_coords <- c(-60,-60,-62,-62,-60)
y_coords <- c(20,25,25,20,20)
poly1 <- sp::Polygon(cbind(x_coords,y_coords))
firstPoly <- sp::Polygons(list(poly1),"A")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
# define the vertices
x1 <- c(-60,-60,-62,-62,-60)
x2 <-c(-50,-50,-55,-55,-50)
y1 <- c(20,25,25,20,20)
y2 <- c(15,25,25,15,15)
# assign the vertices to a `polygon`
poly1 <- sp::Polygon(cbind(x1,y1))
poly2 <- sp::Polygon(cbind(x2,y2))
# This step combines the last two together - making Polygons and then SpatialPolygons
TwoPolys <- sp::SpatialPolygons(list(sp::Polygons(list(poly1),ID = "A"),
sp::Polygons(list(poly2), ID = "B")))
#Let's take a look
TwoPolys
plot(TwoPolys)
library(raster)
shapefile(x = TwoPolys, file = "path/to/output/file.shp")
# This looks up the GADM dataset - for the country US and returns
# the first level of administration which in this case is state boundaries.
States <- raster::getData("GADM", country = "United States", level = 1)
# Have a look at the data
States
plot(States)
States <- States[States$NAME_1 != "Alaksa" & States$NAME_1 != "Hawaii",]
plot(States)
States
States
plot(States)
States <- States[States$NAME_1 != "Alaska" & States$NAME_1 != "Hawaii",]
plot(States)
USborder <- rgeos::gUnaryUnion(States, id = States$HASC_1)
USborder
States@data
USborder <- rgeos::gUnaryUnion(States, id = States$ISO)
USborder
plot(USborder)
plot(USborder, col = "gray70",lwd = 2)
plot(States, add = TRUE, border = "white")
plot(States,
col = "gray70", # fill color
border = "white") # outline color
plot(USborder,
lwd = 3,
add = TRUE) # add to current plot
