crs = "+init=epsg:5070")
par(mar = c(0,0,2,0),mfrow = c(2,2))
world <- raster::shapefile("../Spatial_Layers/TM_WORLD_BORDERS-0.3.shp")
graticules <- sp::gridlines(world, easts = seq(-180,180,10), norths = seq(-90,90,10))
raster::plot(graticules, col = "gray80",main = "WGS84")
raster::plot(world,col = "gray70",add = TRUE)
worldROB <- sp::spTransform(world,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
graticulesROB <- sp::spTransform(graticules,sp::CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
raster::plot(graticulesROB, col = "gray80", main = "Robinson")
raster::plot(worldROB, add = TRUE, col = "gray70")
worldMOLL <- sp::spTransform(world,sp::CRS("+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
graticulesMOLL <- sp::spTransform(graticules,sp::CRS("+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
raster::plot(graticulesMOLL, col = "gray80",main = "Mollewide")
raster::plot(worldMOLL, col = "gray70", add = TRUE)
worldConic <- sp::spTransform(world, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
graticulesConic <- sp::spTransform(graticules, sp::CRS("+proj=aea +lat_1=50 +lat_2=90 +lat_0=-90 +lon_0=-10 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
raster::plot(graticulesConic, col = "gray80",main = "Albers Equal Area")
raster::plot(worldConic, col = "gray70", add = TRUE)
library(raster)
library(rgdal)
States <- readRDS("../Spatial_Layers/GADM_2.8_USA_adm1.rds")
States
States <- States[States$NAME_1 != "Alaska" & States$NAME_1 != "Hawaii",]
# Use the crs() function in raster
raster::crs(States)
# access the projection slot directly
States@proj4string
# access projection as character
# - this can be very useful when
#   using the projection of one
#   object to project another
States@proj4string@projargs
# Define the proj4 string
EqArea <- "+proj=aea
+lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0
+ellps=GRS80
+datum=NAD83
+units=m +no_defs"
# project using the string
States_EqArea2 <- sp::spTransform(x = States,
CRSobj = CRS(EqArea))
# project using the ESPG authority number
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=epsg:5070"))
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea2")
crs(States)<-NA
States
# Let's take a look at the extent of the
# shapefile to give us a clue to what projection
# it may be.
States
# Define WGS84 in proj4 string format
WGS84 <- "+proj=longlat +datum=WGS84
+no_defs +ellps=WGS84 +towgs84=0,0,0"
# use the crs() function in the raster package
# to define the projection
crs(States) <- WGS84
# take a look
States
# read in raster layer using raster function
# NDVI <- raster("path/to/raster/file")
NDVI <- raster::raster("../Spatial_Layers/MOD_NDVI_M_2018-01-01_rgb_3600x1800.FLOAT.TIFF")
NDVI
a <- Sys.time()
NDVIproj <- raster::projectRaster(from = NDVI,
crs = "+init=epsg:5070")
Sys.time()-a
a <- Sys.time()
NDVIproj <- raster::projectRaster(from = NDVI,
crs = sp::CRS("+init=epsg:5070"))
Sys.time()-a
packagesNeeded <- readLines("../DEPENDS.txt")
pkgs <- paste(packagesNeeded,collapse = ",",sep = "'"'")
cat("install.packages(c(",pkgs,"), dependencies = TRUE)")
packagesNeeded <- readLines("../DEPENDS.txt")
pkgs <- paste(packagesNeeded,collapse = ",",sep = "\"")
cat("install.packages(c(",pkgs,"), dependencies = TRUE)")
packagesNeeded <- readLines("../DEPENDS.txt")
pkgs <- paste0(packagesNeeded,collapse = ",")
cat("install.packages(c(",pkgs,"), dependencies = TRUE)")
pkgs
gsub(pkgs,",",""")
gsub
gsub
gsub(x = pkgs, pattern = ",", replacement = "\"")
gsub(x = pkgs, pattern = ",", replacement = """)
gsub(x = pkgs, pattern = ",", replacement = '"')
packagesNeeded <- readLines("../DEPENDS.txt")
pkgs <- paste0(packagesNeeded,collapse = ",")
gsub(x = pkgs, pattern = ",", replacement = '","')
cat("install.packages(c(",pkgs,"), dependencies = TRUE)")
pkgs
packagesNeeded <- readLines("../DEPENDS.txt")
pkgs <- paste0(packagesNeeded,collapse = ",")
pkgs <- gsub(x = pkgs, pattern = ",", replacement = '","')
cat("install.packages(c(",pkgs,"), dependencies = TRUE)")
cat("install.packages(c(",'"',pkgs,'"',"), dependencies = TRUE)")
cat
cat("install.packages(c(",'"',pkgs,'"',"), dependencies = TRUE)",sep="")
cat("install.packages(c(",'"',"devtools",pkgs,'"',"), dependencies = TRUE)",sep="")
cat("install.packages(c(",'"',"devtools",'"',",pkgs,'"',"), dependencies = TRUE)",sep="")
cat("install.packages(c(",'"',"devtools",'"',pkgs,'"',"), dependencies = TRUE)",sep="")
cat("install.packages(c(",'"',"devtools",'"',pkgs,'"',"), dependencies = TRUE)"),sep="")
cat("install.packages(c(",'"',"devtools",'"',pkgs,'"',"), dependencies = TRUE)",sep="")
cat("install.packages(c(",'"',"devtools",'","',pkgs,'"',"), dependencies = TRUE)",sep="")
Sys.Date()
format(Sys.Date(),"%b")
format(Sys.Date(),"%Y-%b-%d")
args(raster::extract)
raster::extract
AZ_lc <- extract(x = LandCover,
y = AZ)
library(raster)
library(sp)
library(rgeos)
LandCover <- raster::raster("../Spatial_Layers/MCD12C1_T1_2011-01-01_rgb_3600x1800.TIFF")
LandCover
States <- raster::getData("GADM", country = "United States", level = 1)
AZ <- States[States$NAME_1=="Arizona",]
AZ
# x = raster layer
# y = SpatialLayer
AZ_lc <- extract(x = LandCover,
y = AZ)
str(AZ_lc)
plot(AZ)
plot(LandCover,add = TRUE, ext = raster::extent(AZ))
plot(LandCover, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
plot(AZ)
plot(LandCover, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
plot(States)
plot(LandCover, add = TRUE, ext = raster::extent(States))
plot(States[!(States$NAME_1 %in% c("Hawaii","Alaska")),])
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(AZ,add = TRUE)
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(AZ,add = TRUE)
par(new = TRUE, smallplot = c(0.5,0.9,0.2,0.8))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(AZ,add = TRUE)
par(new = TRUE, fig = c(0.5,0.9,0.2,0.8))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(AZ,add = TRUE)
par(new = TRUE, fig = c(0.5,0.9,0.1,0.9), mar = c(0,0,0,0))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(lower48, add = TRUE)
plot(AZ,add = TRUE)
par(new = TRUE, fig = c(0.5,0.9,0.1,0.9), mar = c(1,1,1,1))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(lower48, add = TRUE)
plot(AZ,add = TRUE,border = "red")
par(new = TRUE, fig = c(0.5,0.9,0.1,0.9), mar = c(1,1,1,1))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(lower48, add = TRUE)
plot(AZ,add = TRUE,border = "red",lwd = 2)
par(new = TRUE, fig = c(0.5,0.9,0.1,0.9), mar = c(1,1,1,1))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
lower48 <- States[!(States$NAME_1 %in% c("Hawaii","Alaska")),]
plot(lower48)
plot(LandCover, add = TRUE, ext = raster::extent(lower48))
plot(lower48, add = TRUE)
plot(AZ,add = TRUE,border = "red",lwd = 2)
par(new = TRUE, fig = c(0.5,0.9,0.1,0.9), mar = c(1,1,1,1))
plot(AZ)
plot(LandCover, add = TRUE, ext = raster::extent(AZ))
plot(AZ, add = TRUE)
table(AZ_lc)
z <- sort(unique(raster::values(Landcover)))
z <- sort(unique(raster::values(LandCover)))
z
summarizeLC <- function(x,z){
# Find the number of cells
y <- sum(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(z)))
for(i in seq(z)){
LC[1,i] <- ifelse(z[i] %in% dimnames(x)[[1]],
x[which(dimnames(x)[[1]]==z[i])], #if true
0) # else 0
}
LC <- LC/y
colnames(LC)<-z
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
summarizeLC <- function(x,z){
# Find the number of cells
y <- length(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(z)))
for(i in seq(z)){
LC[1,i] <- ifelse(z[i] %in% dimnames(x)[[1]],
x[which(dimnames(x)[[1]]==z[i])], #if true
0) # else 0
}
LC <- LC/y
colnames(LC)<-z
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
AZ_lc
z
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
dimnames(AZ_lc)
table(AZ_lc)
dimnames(table(AZ_lc))
dimnames(table(AZ_lc))[[1]]
summarizeLC <- function(x,z){
# Find the number of cells
y <- length(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(z)))
for(i in seq(z)){
LC[1,i] <- ifelse(z[i] %in% dimnames(table(x))[[1]],
x[which(dimnames(table(x))[[1]]==z[i])], #if true
0) # else 0
}
LC <- LC/y
colnames(LC)<-z
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
length(AZ_lc)
length(AZ_lc[[1]])
summarizeLC <- function(x,z){
# Find the number of cells
y <- length(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(z)))
for(i in seq(z)){
LC[1,i] <- ifelse(z[i] %in% dimnames(table(x))[[1]],
x[which(dimnames(table(x))[[1]]==z[i])], #if true
0) # else 0
}
#LC <- LC/y
colnames(LC)<-z
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
summarizeLC <- function(x,z){
# Find the number of cells
y <- length(x)
tx <- table(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(z)))
for(i in seq(z)){
LC[1,i] <- ifelse(z[i] %in% dimnames(tx)[[1]],
tx[which(dimnames(tx)[[1]]==z[i])], #if true
0) # else 0
}
#LC <- LC/y
colnames(LC)<-z
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
summarizeLC <- function(x,z){
# Find the number of cells
y <- length(x)
tx <- table(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(z)))
for(i in seq(z)){
LC[1,i] <- ifelse(z[i] %in% dimnames(tx)[[1]],
tx[which(dimnames(tx)[[1]]==z[i])], #if true
0) # else 0
}
LC <- LC/y
colnames(LC)<-z
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues
tapply(AZ_lc,sum)
tapply(AZ_lc[[1]],sum)
AZ_lc[[1]]
summarizeLC <- function(x,LC_classes,LC_names = NULL){
# Find the number of cells
y <- length(x)
# Make a table of the cells
tx <- table(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(LC_classes)))
# Loop through the landcover types & return
# the number of cells within each landcover type
for(i in seq(LC_classes)){
LC[1,i] <- ifelse(LC_classes[i] %in% dimnames(tx)[[1]],
#if true
tx[which(dimnames(tx)[[1]]==LC_classes[i])],
# if false
0)
} # end loop
# Convert to percentage
LC <- LC/y
#
colnames(LC)<-ifelse(is.null(LC_names),
# if true
names(LC_classes),
# if false
LC_names)
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,z = z)
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,LC_classes = z)
AZ_lc
summarizeLC(x = AZ_lc, LC_classes = z)
summarizeLC(x = AZ_lc, LC_classes = z)
summarizeLC(x = AZ_lc[[1]], LC_classes = z)
summarizeLC <- function(x,LC_classes,LC_names = NULL){
# Find the number of cells
y <- length(x)
# Make a table of the cells
tx <- table(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(LC_classes)))
# Loop through the landcover types & return
# the number of cells within each landcover type
for(i in seq(LC_classes)){
LC[1,i] <- ifelse(LC_classes[i] %in% dimnames(tx)[[1]],
#if true
tx[which(dimnames(tx)[[1]]==LC_classes[i])],
# if false
0)
} # end loop
# Convert to percentage
LC <- LC/y
#
colnames(LC)<-ifelse(is.null(LC_names),
# if true
LC_classes,
# if false
LC_names)
return(LC)
}
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,LC_classes = z)
summarizeLC <- function(x,LC_classes,LC_names = NULL){
# Find the number of cells
y <- length(x)
# Make a table of the cells
tx <- table(x)
# Create an empty array to store landcover data
LC <- array(NA,c(1,length(LC_classes)))
# Loop through the landcover types & return
# the number of cells within each landcover type
for(i in seq(LC_classes)){
LC[1,i] <- ifelse(LC_classes[i] %in% dimnames(tx)[[1]],
#if true
tx[which(dimnames(tx)[[1]]==LC_classes[i])],
# if false
0)
} # end loop
# Convert to percentage
LC <- LC/y
#
if(!is.null(LC_names)){
colnames(LC)<-LC_names}
else{colnames(LC)<-LC_classes}
return(LC)
}
summarizeLC(x = AZ_lc, LC_classes = z)
summaryValues <- lapply(AZ_lc,FUN = summarizeLC,LC_classes = z)
summaryValues
LC_types <- c("Evergreen Needleleaf forest","Evergreen Broadleaf forest","Deciduous Needleleaf forest","Deciduous Broadleaf forest","Mixed forest","Closed shrublands","Open shrublands","Woody savannas","Savannas","Grasslands","Permanent wetlands","Croplands","Urban and built-up","Cropland/Natural vegetation mosaic","Snow and ice","Barren or sparsely vegetated","Water bodies","Tundra")
LC_types <- c("Evergreen Needleleaf forest","Evergreen Broadleaf forest","Deciduous Needleleaf forest","Deciduous Broadleaf forest","Mixed forest","Closed shrublands","Open shrublands","Woody savannas","Savannas","Grasslands","Permanent wetlands","Croplands","Urban and built-up","Cropland/Natural vegetation mosaic","Snow and ice","Barren or sparsely vegetated","Water bodies","Tundra")
LC_types <- LC_types[LC_classes]
LC_types <- LC_types[z]
LC_types
LC_types <- c("Evergreen Needleleaf forest","Evergreen Broadleaf forest","Deciduous Needleleaf forest","Deciduous Broadleaf forest","Mixed forest","Closed shrublands","Open shrublands","Woody savannas","Savannas","Grasslands","Permanent wetlands","Croplands","Urban and built-up","Cropland/Natural vegetation mosaic","Snow and ice","Barren or sparsely vegetated","Water bodies","Tundra")
summaryValues <- lapply(AZ_lc,
FUN = summarizeLC,
LC_classes = z,
LC_types = LC_types[z])
summaryValues <- lapply(AZ_lc,
FUN = summarizeLC,
LC_classes = z,
LC_names = LC_types[z])
summaryValues
t(summaryValues)
t(summaryValues[[1]])
round(t(summaryValues[[1]]),3)
summaryValues[[1]]
rownames(summaryValues) <- "Percent"
rownames(summaryValues[[1]]) <- "Percent"
round(t(summaryValues[[1]]),3)
StatesOfInterest <- States[States$NAME_1 %in% c("New Hampshire","West Virginia"),]
# Extract the raster values
SOI_lc <- extract(x = LandCover, y = StatesOfInterest)
lz <- sort(unique(unlist(SOI_lc)))
lz
summaryValues <- lapply(SOI_lc,
FUN = summarizeLC,
LC_classes = lz,
LC_names = LC_types[lz])
percentCover <- do.call('rbind',summaryValues)
percentCover
StatesOfInterest
StatesOfInterest$Name_1
StatesOfInterest$NAME_1
rownames(precentCover)<-StatesOfInterest$NAME_1
rownames(percentCover)<-StatesOfInterest$NAME_1
round(t(percentCover),2)
round(t(percentCover),3)
library(raster)
library(sp)
library(rgeos)
dem <- raster::raster("../Spatial_Layers/hb10mdem.txt")
dem
DEM <- raster::raster("../Spatial_Layers/hb10mdem.txt")
SurveyLocs
SurveyLocs <- raster::shapefile("../Spatial_Layers/hbef_valleywideplots.shp")
SurveyLocs
crs(SurveyLocs)
crs(DEM)
sp::spTransform(SurveyLocs,
crs = crs(DEM))
crs(DEM)
sp::spTransform(SurveyLocs,
crs = DEM)
sp::spTransform
args(sp::spTransform)
sp::spTransform(x = SurveyLocs,
CRSobj = crs(DEM))
SurveyLocs_proj <- sp::spTransform(x = SurveyLocs,
CRSobj = crs(DEM))
SurveyLocs_proj
surveyElev <- raster::extract(x = DEM,
y = SurveyLocs_proj)
surveyElev
hist(surveyElev)
hist(surveyElev,col = "gray88"")
hist(surveyElev,col = "gray88")
hist(surveyElev,col = "gray88")
hist(surveyElev,col = "gray88",main = "")
hist(surveyElev,col = "gray88",main = "",breaks = 20)
hist(surveyElev,col = "gray88",main = "",breaks = 15)
str(surveyElev)
raster::extract(x = DEM,
y = SurveyLocs_proj,
fun = mean)
SurveyLocs_proj
SurveyLocs_proj$Elev_m <- raster::extract(x = DEM,
y = SurveyLocs_proj)
SurveyLocs_proj
knitr::purl
list.files("../_pages",pattern = ".Rmd")
lapply(list.files("../_pages",pattern = ".Rmd"),
knitr::purl,
out="../Rscripts/")
lapply(list.files("../_pages",pattern = ".Rmd"),
knitr::purl,
out="../Rscripts")
rmdfiles <- list.files("../_pages",pattern = ".Rmd")
rfiles <- gsub(x = rmdfiles,pattern = "md", replacement="")
rfiles
paste0("../Rscripts/",rfiles)
mapply(rmdfiles,rfiles,function(x,y){knitr::purl(x,out=rfiles})
mapply(rmdfiles,rfiles,function(x,y){knitr::purl(x,out=rfiles)})
mapply(rmdfiles,rfiles,FUN = function(x,y){knitr::purl(x,out=rfiles)})
knitr::purl(
knitr::purl
mapply(rmdfiles,rfiles,FUN = function(x,y){knitr::purl(x,output=rfiles)})
mapply(rmdfiles,rfiles,FUN = function(x,y){knitr::purl(x,output=y)})
rmdfiles <- list.files("../_pages",pattern = ".Rmd")
rfiles <- gsub(x = rmdfiles,pattern = "md", replacement="")
rfiles <- paste0("Rscripts/",rfiles)
mapply(rmdfiles,rfiles,FUN = function(x,y){knitr::purl(x,output=y)})
mapply(rmdfiles,rfiles,FUN = function(x,y){knitr::purl(x,output=y)})
lapply(rmdfiles,knitr::purl)
