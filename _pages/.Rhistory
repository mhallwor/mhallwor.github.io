OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
x[!is.na(x)]<-1
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
plot(OVEN_95poly[[1]])
plot(OVEN_95kde[[1]],legend = FALSE)
plot(OVEN_95poly, add = TRUE)
plot(OVEN_95kde[[1]],legend = FALSE)
plot(OVEN_95poly[[1]], add = TRUE)
plot(OVEN_95poly[[1]])
plot(OVEN_95kde[[1]],legend = FALSE,add = TRUE)
plot(OVEN_95poly[[1]], add = TRUE)
plot(OVEN_mcp[1,])
plot(OVENmcp[1,])
plot(OVEN_95poly[[1]],add = TRUE)
str(OVEN_95poly[[1]])
str(OVEN_95poly[[2]])
OVEN_95poly
OVEN_95poly <- mapply(OVEN_95poly, names(OVEN_95poly),
SIMPLIFY = FALSE,
FUN = function(x,y){x@polygons[[1]]@ID <- y
return(x)})
library(raster)
library(sp)
library(ks)
OVEN_locs <- read.csv("../Spatial_Layers/OVEN_2012_locs.csv")
str(OVEN_locs)
# coords = cbind(long,lat)
# crs = WGS84
OVENpts <- sp::SpatialPoints(coords = cbind(OVEN_locs$long,OVEN_locs$lat),
proj4string = sp::CRS("+init=epsg:4326"))
# take a peek
head(OVENpts)
OVEN_spdf <- sp::SpatialPointsDataFrame(OVENpts,OVEN_locs)
head(OVEN_spdf)
OVEN_sep <- split(x = OVEN_spdf, f = OVEN_spdf$Bird, drop = FALSE)
OVENmcp <- lapply(OVEN_sep, FUN = function(x){rgeos::gConvexHull(x)})
OVENmcp <- mapply(OVENmcp, names(OVENmcp),
SIMPLIFY = FALSE,
FUN = function(x,y){x@polygons[[1]]@ID <- y
return(x)})
OVENmcp <- do.call(rbind,OVENmcp)
OVENmcp
OVENmcp <- SpatialPolygonsDataFrame(Sr = OVENmcp,
data = data.frame(Bird = names(OVENmcp)),
match.ID = FALSE)
OVENmcp
# This chunck creates a plot
# Generate colors
genCols <- colorRampPalette(c(rgb(0,0,0,0.5),
rgb(0.1,0.1,0.9,0.5),
rgb(0.9,0.9,0,0.5)),
alpha = TRUE)
# generate x colors
cols <- genCols(length(OVENmcp))
plot(OVENmcp, col = cols)
bw <- lapply(OVEN_sep, FUN = function(x){ks::Hlscv(x@coords)})
OVEN_kde <-mapply(OVEN_sep,bw,
SIMPLIFY = FALSE,
FUN = function(x,y){
raster(kde(x@coords,h=y))})
plot(OVEN_kde[[1]])
plot(OVENmcp[1,],add = TRUE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
q95 <- quantile(x,probs = 0.95)
x[x<q95]<-NA
return(x)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
x[!is.na(x)]<-1
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
OVEN_95poly <- mapply(OVEN_95poly, names(OVEN_95poly),
SIMPLIFY = FALSE,
FUN = function(x,y){x@polygons[[1]]@ID <- y
return(x)})
OVEN_95poly <- do.call(rbind,OVEN_95poly)
OVEN_95poly
names(OVEN_95poly)
lapply(OVEN_95poly, function(x){x@polygons[[1]]@ID})
OVEN_95poly
getSpPPolygonsIDSlots(OVEN_95poly)
OVEN_95poly$Bird <- getSpPPolygonsIDSlots(OVEN_95poly)
plot(OVEN_95poly, col = cols)
OVEN_95poly
OVENkde_utm <- sp::spTransform(OVEN_95poly, sp::CRS("+init=epsg:32619"))
OVENkde_utm
rgeos::gArea(OVENkde_utm)
rgeos::gArea(OVENkde_utm, byid = TRUE
rgeos::gArea(OVENkde_utm, byid = TRUE)
rgeos::gArea(OVENkde_utm, byid = TRUE)
rgeos::gArea(OVENkde_utm, byid = TRUE)/10000
rgeos::gArea(OVENkde_utm, byid = TRUE)/1000
rgeos::gArea(OVENkde_utm, byid = TRUE)/10000
rgeos::gArea(OVENkde_utm, byid = TRUE)
library(raster)
library(sp)
library(ks)
OVEN_locs <- read.csv("../Spatial_Layers/OVEN_2012_locs.csv")
str(OVEN_locs)
# coords = cbind(long,lat)
# crs = WGS84
OVENpts <- sp::SpatialPoints(coords = cbind(OVEN_locs$long,OVEN_locs$lat),
proj4string = sp::CRS("+init=epsg:4326"))
# take a peek
head(OVENpts)
OVEN_spdf <- sp::SpatialPointsDataFrame(OVENpts,OVEN_locs)
head(OVEN_spdf)
OVEN_sep <- split(x = OVEN_spdf, f = OVEN_spdf$Bird, drop = FALSE)
OVENmcp <- lapply(OVEN_sep, FUN = function(x){rgeos::gConvexHull(x)})
OVENmcp <- mapply(OVENmcp, names(OVENmcp),
SIMPLIFY = FALSE,
FUN = function(x,y){x@polygons[[1]]@ID <- y
return(x)})
OVENmcp <- do.call(rbind,OVENmcp)
OVENmcp
OVENmcp <- SpatialPolygonsDataFrame(Sr = OVENmcp,
data = data.frame(Bird = names(OVENmcp)),
match.ID = FALSE)
OVENmcp
# This chunck creates a plot
# Generate colors
genCols <- colorRampPalette(c(rgb(0,0,0,0.5),
rgb(0.1,0.1,0.9,0.5),
rgb(0.9,0.9,0,0.5)),
alpha = TRUE)
# generate x colors
cols <- genCols(length(OVENmcp))
plot(OVENmcp, col = cols)
bw <- lapply(OVEN_sep, FUN = function(x){ks::Hlscv(x@coords)})
OVEN_kde <-mapply(OVEN_sep,bw,
SIMPLIFY = FALSE,
FUN = function(x,y){
raster(kde(x@coords,h=y))})
plot(OVEN_kde[[1]])
plot(OVENmcp[1,],add = TRUE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
y <- sum(x)
probx <- x/y
q95 <- quantile(probx,probs = 0.95)
probx[probx<q95]<-NA
return(probx)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95kde
library(raster)
library(sp)
library(ks)
OVEN_locs <- read.csv("../Spatial_Layers/OVEN_2012_locs.csv")
str(OVEN_locs)
# coords = cbind(long,lat)
# crs = WGS84
OVENpts <- sp::SpatialPoints(coords = cbind(OVEN_locs$long,OVEN_locs$lat),
proj4string = sp::CRS("+init=epsg:4326"))
# take a peek
head(OVENpts)
OVEN_spdf <- sp::SpatialPointsDataFrame(OVENpts,OVEN_locs)
head(OVEN_spdf)
OVEN_sep <- split(x = OVEN_spdf, f = OVEN_spdf$Bird, drop = FALSE)
OVENmcp <- lapply(OVEN_sep, FUN = function(x){rgeos::gConvexHull(x)})
OVENmcp <- mapply(OVENmcp, names(OVENmcp),
SIMPLIFY = FALSE,
FUN = function(x,y){x@polygons[[1]]@ID <- y
return(x)})
OVENmcp <- do.call(rbind,OVENmcp)
OVENmcp
OVENmcp <- SpatialPolygonsDataFrame(Sr = OVENmcp,
data = data.frame(Bird = names(OVENmcp)),
match.ID = FALSE)
OVENmcp
# This chunck creates a plot
# Generate colors
genCols <- colorRampPalette(c(rgb(0,0,0,0.5),
rgb(0.1,0.1,0.9,0.5),
rgb(0.9,0.9,0,0.5)),
alpha = TRUE)
# generate x colors
cols <- genCols(length(OVENmcp))
plot(OVENmcp, col = cols)
bw <- lapply(OVEN_sep, FUN = function(x){ks::Hlscv(x@coords)})
OVEN_kde <-mapply(OVEN_sep,bw,
SIMPLIFY = FALSE,
FUN = function(x,y){
raster(kde(x@coords,h=y))})
plot(OVEN_kde[[1]])
plot(OVENmcp[1,],add = TRUE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.95)
probx[probx<q95]<-NA
return(probx)})
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.05)
probx[probx<q95]<-NA
return(probx)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
probx
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.05)
probx[probx<q95]<-NA
return(probx)})
OVEN_95kde
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.95)
probx[probx<q95]<-NA
return(probx)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.05)
probx[probx<q95]<-NA
return(probx)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
x[x==0]<-NA
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.05)
probx[probx<q95]<-NA
return(probx)})
library(raster)
library(sp)
library(ks)
OVEN_locs <- read.csv("../Spatial_Layers/OVEN_2012_locs.csv")
str(OVEN_locs)
# coords = cbind(long,lat)
# crs = WGS84
OVENpts <- sp::SpatialPoints(coords = cbind(OVEN_locs$long,OVEN_locs$lat),
proj4string = sp::CRS("+init=epsg:4326"))
# take a peek
head(OVENpts)
OVEN_spdf <- sp::SpatialPointsDataFrame(OVENpts,OVEN_locs)
head(OVEN_spdf)
OVEN_sep <- split(x = OVEN_spdf, f = OVEN_spdf$Bird, drop = FALSE)
OVENmcp <- lapply(OVEN_sep, FUN = function(x){rgeos::gConvexHull(x)})
OVENmcp <- mapply(OVENmcp, names(OVENmcp),
SIMPLIFY = FALSE,
FUN = function(x,y){x@polygons[[1]]@ID <- y
return(x)})
OVENmcp <- do.call(rbind,OVENmcp)
OVENmcp
OVENmcp <- SpatialPolygonsDataFrame(Sr = OVENmcp,
data = data.frame(Bird = names(OVENmcp)),
match.ID = FALSE)
OVENmcp
# This chunck creates a plot
# Generate colors
genCols <- colorRampPalette(c(rgb(0,0,0,0.5),
rgb(0.1,0.1,0.9,0.5),
rgb(0.9,0.9,0,0.5)),
alpha = TRUE)
# generate x colors
cols <- genCols(length(OVENmcp))
plot(OVENmcp, col = cols)
bw <- lapply(OVEN_sep, FUN = function(x){ks::Hlscv(x@coords)})
OVEN_kde <-mapply(OVEN_sep,bw,
SIMPLIFY = FALSE,
FUN = function(x,y){
raster(kde(x@coords,h=y))})
plot(OVEN_kde[[1]])
plot(OVENmcp[1,],add = TRUE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
x[x==0]<-NA
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.05)
probx[probx<q95]<-NA
return(probx)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
x[x==0]<-NA
y <- cellStats(x,sum)
probx <- x/y
q95 <- quantile(probx,probs = 0.05,na.rm = TRUE)
probx[probx<q95]<-NA
return(probx)})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
x[!is.na(x)]<-1
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
x[x==0]<-NA
den <- raster::getValues(x)
z <- sort(den[!is.na(den)], decreasing=TRUE)
y <- cumsum(as.numeric(z))
i <- sum(y <= 0.95 * y[length(y)])
return(raster::setValues(x, den >= z[i]))})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95kde <- lapply(OVEN_kde,
FUN = function(x){
x[x==0]<-NA
dv <- raster::getValues(x)
y <- sort(dv[!is.na(dv)], decreasing=TRUE)
z <- cumsum(as.numeric(y))
i <- sum(z <= 0.95 * z[length(z)])
return(raster::setValues(x, dv >= y[i]))})
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
# This code makes a custom function called getContour.
# Inputs:
#    kde = kernel density estimate
#    prob = probabily - default is 0.95
getContour <- function(kde, prob = 0.95){
# set all values 0 to NA
kde[kde == 0]<-NA
# create a vector of raster values
kde_values <- raster::getValues(kde)
# sort values
sortedValues <- sort(kde_values[!is.na(kde_values),decreasing = TRUE])
# find cumulative sum up to ith location
sums <- cumsum(as.numeric(sortedvalues))
# binary response is value in the probabily zone or not
p <- sum(sums <= prob * sums[length(sums)])
# Set values in raster to 1 or 0
kdeprob <- raster::setValues(kde, kde_values >= sortedValues[p])
# return new kde
return(kdeprob)
}
OVEN_95kde <- lapply(OVEN_kde,
FUN = getContour,prob = 0.95)
getContour <- function(kde, prob = 0.95){
# set all values 0 to NA
kde[kde == 0]<-NA
# create a vector of raster values
kde_values <- raster::getValues(kde)
# sort values
sortedValues <- sort(kde_values[!is.na(kde_values)],decreasing = TRUE)
# find cumulative sum up to ith location
sums <- cumsum(as.numeric(sortedvalues))
# binary response is value in the probabily zone or not
p <- sum(sums <= prob * sums[length(sums)])
# Set values in raster to 1 or 0
kdeprob <- raster::setValues(kde, kde_values >= sortedValues[p])
# return new kde
return(kdeprob)
}
OVEN_95kde <- lapply(OVEN_kde,
FUN = getContour,prob = 0.95)
getContour <- function(kde, prob = 0.95){
# set all values 0 to NA
kde[kde == 0]<-NA
# create a vector of raster values
kde_values <- raster::getValues(kde)
# sort values
sortedValues <- sort(kde_values[!is.na(kde_values)],decreasing = TRUE)
# find cumulative sum up to ith location
sums <- cumsum(as.numeric(sortedValues))
# binary response is value in the probabily zone or not
p <- sum(sums <= prob * sums[length(sums)])
# Set values in raster to 1 or 0
kdeprob <- raster::setValues(kde, kde_values >= sortedValues[p])
# return new kde
return(kdeprob)
}
OVEN_95kde <- lapply(OVEN_kde,
FUN = getContour,prob = 0.95)
par(mfrow = c(1,2))
plot(OVEN_kde[[1]],legend = FALSE)
plot(OVEN_95kde[[1]],legend = FALSE)
OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
x[!is.na(x)]<-1
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
OVEN_95kde
OVEN_95poly <- lapply(OVEN_95kde,
FUN = function(x){
x[x==0]<-NA
y <- rasterToPolygons(x, dissolve = TRUE)
return(y)
})
DEM <- raster::raster("../Spatial_Layers/hb10mdem.txt")
DEM
DEMutm <- projectRaster(DEM, crs = "+init=epsg:32619")
DEMutm
plot(DEMutm)
extract(DEMutm,OVENkde_utm)
extract(DEMutm,OVENkde_utm, fun = "mean")
extract(DEMutm,OVENkde_utm, mean)
hs <- hillShade(Slope(DEMutm),Aspect(DEMutm))
hs <- raster::hillShade(terrain(DEMutm,slope),terrain(DEMutm,aspect))
hs <- raster::hillShade(terrain(DEMutm,"slope"),terrain(DEMutm,"aspect""))
hs <- raster::hillShade(terrain(DEMutm,"slope"),terrain(DEMutm,"aspect"))
hs <- raster::hillShade(terrain(DEMutm,"slope"),terrain(DEMutm,"aspect"))
plot(hs,col = gray(1:100/100))
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE)
par(bty = "n")
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE)
plot(OVENkde_utm,add = TRUE)
par(bty = "n")
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE, extent = OVENkde_utm)
plot(OVENkde_utm,add = TRUE)
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE, ext = extent(OVENkde_utm))
plot(OVENkde_utm,add = TRUE)
par(bty = "n")
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE, ext = extent(OVENkde_utm))
plot(OVENkde_utm,add = TRUE)
par(bty = "n")
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE, ext = extent(OVENkde_utm)+500)
plot(OVENkde_utm,add = TRUE)
par(bty = "n")
plot(hs,col = gray(1:100/100),legend = FALSE, axes = FALSE, ext = extent(OVENkde_utm)+1000)
plot(OVENkde_utm,add = TRUE)
OVENkde$Bird
OVENkde_utm$Bird
data.frame(BirdID = OVENkde_utm$Bird,
area_ha = rgeos::gArea(OVENkde_utm, byid = TRUE)/10000,
Elev_mean = extract(DEMutm,OVENkde_utm, mean),
Elev_lower = extract(DEMutm,OVENkde_utm,min),
Elev_upper = extract(DEMutm,OVENkde_utm,max))
par(mar = c(0,0,0,0))
raster::plotRGB(raster::brick("../Spatial_Layers/BlueMarbleNG-TB_2004-09-01_rgb_3600x1800.TIFF"),
colNA = "black")
par(mar = c(0,0,0,0))
raster::plotRGB(raster::brick("../Spatial_Layers/BlueMarbleNG-TB_2004-09-01_rgb_3600x1800.TIFF"),
colNA = "black")
par(mar = c(0,0,0,0))
raster::plotRGB(raster::brick("../Spatial_Layers/BlueMarbleNG-TB_2004-09-01_rgb_3600x1800.TIFF"),
colNA = "black")
installed.packages()
installed.packages("tidyverse")
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(sf)
tu_sfg <- st_point(c(-110.9265, 32.2217)) #Tucson
ph_sfg <- st_point(c(-112.0740, 33.4484)) #Phoenix
fl_sfg <- st_point(c(-111.6513, 35.1983)) #Flagstaff
st_coordinates(tu_sfg)
## Create MULTIPOINT object
az_sfg <- st_multipoint(rbind(c(-110.9265, 32.2217),
c(-112.0740, 33.4484),
c(-111.6513, 35.1983)))
# Create LINESTRING object
# Run on your own!
#az_sfg <- st_linestring(rbind(c(-110.9265, 32.2217),
#                              c(-112.0740, 33.4484),
#                              c(-111.6513, 35.1983)))
cities_sfc <- st_sfc(tu_sfg, ph_sfg, fl_sfg, crs = 4326)
cities_sfc
st_crs(cities_sfc)
plot(cities_sfc)
cities_df <- data.frame(Name = c("Tucson", "Phoenix", "Flagstaff"),
Population = c(520116, 1445632, 65870),
Elevation = c(2389, 1086, 6910))
cities_sf <- st_sf(cities_df, geometry = cities_sfc)
cities_sf
class(cities_sf)
str(cities_sf)
library(maps)
us_states <- map("state", plot = FALSE, fill = TRUE)
str(us_states)
library(tidyverse)
az_poly <- filter(us_states, names == "arizona")
install.packages("tidyverse")
install.packages("tidyverse")
ggplot() +
geom_sf(data = az_sf) +     # Arizona border polygon
geom_sf(data = cities_sf)   # Cities
install.packages("ggplot")
sessionInfo()
