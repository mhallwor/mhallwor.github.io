States@proj4string
States@proj4string@projargs
str(States,1)
str(States,2)
sp::spTransform()
sp::spTransform
States_EqArea <- sp::spTransform(x = States,
CRSobj="EPSG::9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj="+EPSG::9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj="+EPSG:9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj="+init=epsg:9820")
States_EqArea <- sp::spTransform(x = States,
CRSobj= CRS("+init=epsg:9820"))
States_EqArea <- sp::spTransform(x = States,
CRS("+init=epsg:9820"))
States_EqArea <- sp::spTransform(x = States,
CRS("Proj4js.defs["ESRI:102008"]"))
States_EqArea <- sp::spTransform(x = States,
CRS("ESRI:102008"))
States_EqArea <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
plot(States_EqArea)
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
EqArea <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
States_EqArea2 <- sp::spTransform(x = States,
CRS(EqArea))
par(mar = c(0,0,0,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea1")
par(mar = c(0,2,0,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea1")
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea1")
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=epsg:102008"))
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=epsg:102008"))
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
# Let's remove Alaska and Hawaii for plotting purposes
States <- States[States$NAME != "Alaska" & States$NAME != "Hawaii",]
States
States$NAME
States
States <- readRDS("../Spatial_Layers/GADM_2.8_USA_adm1.rds")
States
States <- States[States$NAME_1 != "Alaska" & States$NAME_1 != "Hawaii",]
States
crs(States)<-NA
States
crs(States) <- "Totally Awesome projection"
crs(States) <- EqArea
plot(States)
States
crs(States)<-NA
States@proj4string
States@proj4string@projargs <- WGS84
WGS84 <- "+proj=longlat +datum=WGS84
+no_defs +ellps=WGS84 +towgs84=0,0,0"
States@proj4string@projargs <- WGS84
# take a look
States
spTransform(States,CRS(EqArea))
plot(spTransform(States,CRS(EqArea)))
States_EqArea2
States_EqArea1
crs(States_EqArea1)==crs(States_EqArea2)
crs(States_EqArea1)=crs(States_EqArea2)
identicalCRS(States_EqArea1,States_EqArea2)
# Define the proj4 string
EqArea <- "+proj=aea
+lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0
+ellps=GRS80
+datum=NAD83
+units=m +no_defs"
# project using the string
States_EqArea2 <- sp::spTransform(x = States,
CRSobj = CRS(EqArea))
# project using the ESPG authority number
States_EqArea1 <- sp::spTransform(x = States,
CRS("+init=ESRI:102008"))
sp::identicalCRS(States_EqArea1,States_EqArea2)
States_EqArea2
States_EqArea1
showESPG()
sp::showESPG()
sp::showEPSG()
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
degAxis(side = 1)
par(mar = c(4,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
degAxis(side = 1)
par(mar = c(0,0,2,0),mfrow = c(1,2))
raster::plot(States_EqArea1, col = "gray70",border = "white",main = "States_EqArea1")
raster::plot(States_EqArea2, col = "gray70",border = "white",main = "States_EqArea2")
library(rgdal)
x_coords <- runif(n = 100, min = -100, max = -80)
y_coords <- runif(n = 100, min = 25, max = 45)
# Have a look at the first coordinates
head(cbind(x_coords,y_coords))
x_coords <- c(-60,-62,-62,-60)
y_coords <- c(20,25,25,20)
Polygon(cbind(x_coords,y_coords))
sp::Polygon(cbind(x_coords,y_coords))
plot(sp::Polygon(cbind(x_coords,y_coords)))
raster::plot(sp::Polygon(cbind(x_coords,y_coords)))
x_coords <- c(-60,-60,-62,-62,-60)
y_coords <- c(20,25,25,20,20)
plot(sp::Polygon(cbind(x_coords,y_coords)))
sp::Polygon(cbind(x_coords,y_coords))
sp::SpatialPolygon(sp::Polygon(cbind(x_coords,y_coords)),id = "A")
sp::SpatialPolygon(list(sp::Polygon(cbind(x_coords,y_coords))),id = "A")
sp::SpatialPolygons(list(sp::Polygon(cbind(x_coords,y_coords))),id = "A")
sp::SpatialPolygons(list(sp::Polygon(cbind(x_coords,y_coords))))
sp::SpatialPolygons(Polygons=list(sp::Polygon(cbind(x_coords,y_coords))))
sp::SpatialPolygons(Polygons=sp::Polygon(cbind(x_coords,y_coords)))
poly1 <- Polygon(cbind(x_coords,y_coords))
poly1 <- polygon(cbind(x_coords,y_coords))
Polygon(cbind(x_coords,y_coords))
poly1 <- sp::Polygon(cbind(x_coords,y_coords))
sp::Polygons(list(poly1),"A")
firstPoly <- sp::Polygons(list(poly1),"A")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly),1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly),"1")
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly),1)
sp::Polygons(list(poly1),"A")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
plot(firstSpatialPoly)
raster::plot(firstSpatialPoly)
firstSptialPoly
firstSpatialPoly
x <- c(-60,-60,-62,-62,-60,-50,-50,-55,-55,-50)
y <- c(20,25,25,20,20,15,25,25,15,15)
poly <- c(rep(1,5),rep(2,5))
# define the vertices
x1 <- c(-60,-60,-62,-62,-60)
x2 <-c(-50,-50,-55,-55,-50)
y1 <- c(20,25,25,20,20)
y2 <- c(15,25,25,15,15)
# assign the vertices to a `polygon`
poly1 <- Polygons(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- sp::Polygons(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- sp::polygon(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- polygon(cbind(x1,y1),1)
# assign the vertices to a `polygon`
poly1 <- polygon(cbind(x1,y1))
# assign the vertices to a `polygon`
poly1 <- sp::Polygon(cbind(x1,y1))
poly2 <- sp::Polygon(cbind(x2,y2))
Polygons(list(poly1),1)
sp::Polygons(list(poly1),1)
sp::Polygons(list(poly1),"A")
Polygons
sp::Polygons
sp::Polygons(list(poly1), ID = "A")
sp::SpatialPolygons(list(sp::Polygons(list(poly1),ID = "A"),sp::Polygons(list(poly2), ID = "B"))
)
TwoPolys <- sp::SpatialPolygons(list(sp::Polygons(list(poly1),ID = "A"),
sp::Polygons(list(poly2), ID = "B")))
raster::plot(TwoPolys)
TwoPolys
# This looks up the GADM dataset - for the country US and returns
# the first level of administration which in this case is state boundaries.
States <- raster::getData("GADM", country = "United States", level = 1)
# Have a look at the data
States
States
plot(States)
plot(States)
# load library
library(sp)
# Make a set of coordinates that represent vertices
# with longitude and latitude in the familiar
# degrees
x_coords <- c(-60,-60,-62,-62,-60)
y_coords <- c(20,25,25,20,20)
poly1 <- sp::Polygon(cbind(x_coords,y_coords))
firstPoly <- sp::Polygons(list(poly1),"A")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
# define the vertices
x1 <- c(-60,-60,-62,-62,-60)
x2 <-c(-50,-50,-55,-55,-50)
y1 <- c(20,25,25,20,20)
y2 <- c(15,25,25,15,15)
# assign the vertices to a `polygon`
poly1 <- sp::Polygon(cbind(x1,y1))
poly2 <- sp::Polygon(cbind(x2,y2))
# This step combines the last two together - making Polygons and then SpatialPolygons
TwoPolys <- sp::SpatialPolygons(list(sp::Polygons(list(poly1),ID = "A"),
sp::Polygons(list(poly2), ID = "B")))
#Let's take a look
TwoPolys
plot(TwoPolys)
library(raster)
shapefile(x = TwoPolys, file = "path/to/output/file.shp")
# This looks up the GADM dataset - for the country US and returns
# the first level of administration which in this case is state boundaries.
States <- raster::getData("GADM", country = "United States", level = 1)
# Have a look at the data
States
plot(States)
States <- States[States$NAME_1 != "Alaksa" & States$NAME_1 != "Hawaii",]
plot(States)
States
States
plot(States)
States <- States[States$NAME_1 != "Alaska" & States$NAME_1 != "Hawaii",]
plot(States)
USborder <- rgeos::gUnaryUnion(States, id = States$HASC_1)
USborder
States@data
USborder <- rgeos::gUnaryUnion(States, id = States$ISO)
USborder
plot(USborder)
plot(USborder, col = "gray70",lwd = 2)
plot(States, add = TRUE, border = "white")
plot(States,
col = "gray70", # fill color
border = "white") # outline color
plot(USborder,
lwd = 3,
add = TRUE) # add to current plot
library(leaflet)
leaflet()
States <- raster::getData("GADM", country = "United States", level = 1)
leaflet(data = States) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet
leaflet() %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
States@coords
States
leaflet(data = extent(States))
library(raster)
leaflet(data = extent(States))
addPolygons
leaflet(data = map(States)) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = extent(States)) %>% addTiles()
r <- maps::map(States, plot = FALSE, fill = TRUE)
r
leaflet(data = r) %>% addTiles()
leaflet(data = r) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
data(worldsimpl)
data(worldsimpl,package = "maptools")
data(wrldsimpl,package = "maptools")
data(wrldsmpl,package = "maptools")
data(wrldsimple,package = "maptools")
data(worldsimpl,package = "maptools")
data(wrldsimpl,package = "maptools")
data(wrld_simpl,package = "maptools")
leaflet(data = wrld_simpl)
leaflet(data = wrld_simpl) %>% addTiles()
leaflet(data = wrld_simpl) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
States <- raster::getData("GADM",country = "United States", level = 1)
NH <- States[States$NAME_1 == "New Hampshire",]
leaflet(data = NH) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = NH) %>% addTiles() %>%
addPolygons( stroke = TRUE)
providerTileOptions()
leaflet(data = NH) %>%
addTiles() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")
addPolygons(stroke = FALSE)
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")
addPolygons(stroke = FALSE) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography")
leaflet(data = NH) %>%
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")
addPolygons(stroke = FALSE) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(stroke = FALSE) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(stroke = FALSE,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(stroke = TRUE,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(stroke = TRUE,width = 2,color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(stroke = TRUE,width = 1,color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(., stroke = TRUE, width = 1, color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(., stroke = TRUE,# width = 1, color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(., stroke = TRUE, weight = 1, color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
mapNH <- leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(., stroke = TRUE, weight = 1, color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE))
mapNH %>% addMiniMap()
mapNH <- leaflet(data = NH) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("OpenTopoMap", group = "Topography")%>%
addPolygons(., stroke = TRUE, weight = 1, color = "black",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
# Layers control
addLayersControl(
baseGroups = c("Aerial", "Topography"),
options = layersControlOptions(collapsed = TRUE)) %>%
addMiniMap()
mapNH
# read in raster layer using raster function
# NDVI <- raster("path/to/raster/file")
NDIV <- raster::raster("../Spatial_Layers/MOD_NDVI_M_2018-01-01_rgb_3600x1800.FLOAT.TIFF")
# read in raster layer using raster function
# NDVI <- raster("path/to/raster/file")
NDVI <- raster::raster("../Spatial_Layers/MOD_NDVI_M_2018-01-01_rgb_3600x1800.FLOAT.TIFF")
NDVI
plot(NDVI)
raster::plot(NDVI)
raster::raster
str(NDVI)
plot(NDVI, axes = FALSE,horiz = TRUE)
hist(NDVI,main = "",col = "gray")
raster::plot(NDVI, axes = FALSE, zlim = c(-0.1,0.9))
# read in raster layer using raster function
# NDVI <- raster("path/to/raster/file")
NDVI <- raster::raster("../Spatial_Layers/MOD_NDVI_M_2018-01-01_rgb_3600x1800.FLOAT.TIFF")
raster::plot(NDVI, axes = FALSE, zlim = c(-0.1,0.9))
knitr::purl("basics_Rasters.Rmd")
list.files(pattern = "*.Rmd")
lapply(list.files(pattern = "*.Rmd"),knitr::purl)
occMap <- exp(unmarked::coef(occ)[1]+unmarked::coef(occ)[2]*DEM_m)/
(1+exp(unmarked::coef(occ)[1]+unmarked::coef(occ)[2]*DEM_m))
library(raster)
library(sp)
library(rgeos)
# Read in Administrative forest boundaries
# This shapefile has boundary information
# for forests the U.S. federal govt is
# responsible for - i.e., National Forests,
# National Monuments, etc.
NatForest <- raster::shapefile("../Spatial_Layers/S_USA.AdministrativeForest.shp")
# Take a glance at the file
NatForest
CNF <- NatForest[grep(x=NatForest$FORESTNAME,pattern="Coronado"),]
# Get elevation data using the raster package
DEM <- raster::getData(name = "alt", country = "United States")
# Save only the elevation in the lower 48
DEM <- DEM[[1]]
par(bty = "n")
plot(DEM,ext = extent(CNF),axes = FALSE)
plot(CNF, add = TRUE)
set.seed(12345)
surveyPts <- sp::spsample(x = CNF, n = 100, type = "regular")
plot(CNF)
plot(surveyPts, add = TRUE, pch = 19)
surveyPts
# Define the projection in proj4 format
EqArea <- "+proj=aea
+lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0
+ellps=GRS80
+datum=NAD83
+units=m +no_defs"
# project data using the sp package
surveyPts_m <- sp::spTransform(surveyPts, sp::CRS(EqArea))
# project forest boundary
CNF_m <- sp::spTransform(CNF, sp::CRS(EqArea))
DEM <- crop(DEM,CNF)
# take a look
DEM
DEM_m <- projectRaster(DEM, crs = EqArea)
library(rgeos)
surveyCircle <- gBuffer(surveyPts_m, width = 50, byid = TRUE)
pt_elev <- extract(DEM_m, surveyCircle, fun = mean, na.rm = TRUE)
par(bty = "l")
hist(pt_elev, xlab = "Elevation", ylab = "Frequency", main = "",
col = "gray", border = "gray88", yaxt = "n")
axis(2,las = 2)
#library(AHMbook)
#library(unmarked)
# Simulate occupancy data
# M = number of sites
# J = number of occassions
simCount <- AHMbook::simOcc(M = length(surveyPts),
J = 3,
mean.occupancy = 0.6,
mean.detection = 0.7,
show.plot = FALSE)$y
# see first few rows
head(simCount)
# Make unmarked frame for occupancy data
umf <- unmarked::unmarkedFrameOccu(y = simCount,
siteCovs=data.frame(pt_elev),
obsCovs=NULL)
# run the occupancy model
occ <- unmarked::occu(~1~pt_elev,umf)
occMap <- exp(unmarked::coef(occ)[1]+unmarked::coef(occ)[2]*DEM_m)/
(1+exp(unmarked::coef(occ)[1]+unmarked::coef(occ)[2]*DEM_m))
plot(mask(occMap, CNF_m),col = bpy.colors(30))
plot(CNF_m, add = TRUE, lwd = 1.5)
plot(mask(occMap, CNF_m),col = bpy.colors(30))
plot(CNF_m, add = TRUE, lwd = 3, border = "black")
plot(mask(occMap, CNF_m),col = bpy.colors(30))
plot(CNF_m, add = TRUE, lwd = 2, border = "black")
