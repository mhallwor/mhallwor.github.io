exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = 7,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = TRUE)
par(mar = c(0,0,0,0))
plot(sat)
plot(NH, add = TRUE)
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = TRUE)
par(mar = c(0,0,0,0))
plot(sat)
plot(NH, add = TRUE)
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = TRUE)
plot(sat)
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = FALSE)
par(mar = c(0,0,0,0))
plot(sat)
sat <- gmap(x = NH,
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = FALSE)
plot(sat)
plot(NH, add = TRUE)
sat
plot(sat[[1]])
plot(sat[[2]])
str(sat)
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = FALSE,
rgb = TRUE)
plotRGB(sat)
plot(NH, add = TRUE)
sat@crs
NHproj <- sp::spTransform(NH,sp::CRS(sat@crs@projargs))
plotRGB(raster::mask(sat,NHproj))
par(mfrow = c(1,2))
plotRGB(sat)
plotRGB(raster::mask(sat,NHproj))
plotRGB(sat_mask)
par(mfrow = c(1,2))
plotRGB(sat)
plotRGB(raster::mask(sat,NHproj))
plotRGB(sat_mask)
plot(sp::spTransform(States,sp::CRS(sat@crs@projargs))),add = TRUE)
par(mfrow = c(1,2))
plotRGB(sat)
plotRGB(raster::mask(sat,NHproj))
plot(sp::spTransform(States,sp::CRS(sat@crs@projargs))),add = TRUE)
par(mfrow = c(1,2))
plotRGB(sat)
plotRGB(raster::mask(sat,NHproj))
plot(sp::spTransform(States,sp::CRS(sat@crs@projargs)),add = TRUE)
# load dismo package
library(dismo)
# Download a map from Google Maps API
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = FALSE,
# return raster stack with red,green,blue values
rgb = TRUE)
NHproj <- sp::spTransform(NH,sp::CRS(sat@crs@projargs))
# Avoid weird white space by using using the rgb = TRUE &
# using raster's plotRGB function.
par(mfrow = c(1,2))
plotRGB(sat)
plotRGB(raster::mask(sat,NHproj))
plot(sp::spTransform(States,sp::CRS(sat@crs@projargs)),add = TRUE)
raster::plotRGB(sat)
rasterLLplotRGB(raster::mask(sat,NHproj))
raster::plotRGB(raster::mask(sat,NHproj))
raster::mask(sat,NHproj)
raster::mask(sat,NHproj)
library(dismo)
# Download a map from Google Maps API
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = FALSE,
# return raster stack with red,green,blue values
rgb = TRUE)
knitr::opts_chunk$set(error = TRUE)
# New Hampshire plot
plot(NH)
# scale bar layer
sb <- layout.scale.bar(height = 0.05)
# shift scale bar
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]-0.5))
# Add to plot
plot(sb_slide, add = TRUE, col = c("white","black"))
knitr::opts_chunk$set(error = TRUE)
library(raster)
library(sp)
library(rgeos)
library(leaflet)
library(dismo)
# Get State boundaries
States <- raster::getData("GADM", country = "United States", level = 1)
# make NH polygon
NH <- States[States$NAME_1 == "New Hampshire",]
# plot a single polygon
plot(NH)
# Detach packages to illustrate error message
detach("package:dismo", unload = TRUE)
detach("package:rgeos",unload = TRUE)
detach("package:raster", unload = TRUE)
detach("package:sp", unload = TRUE)
# plot NH without raster or sp loaded to show error
plot(NH)
# bring the libraries back
library(raster)
library(sp)
library(dismo)
# Set the random seed
set.seed(12345)
# make random points within New Hampshire
randPts <- sp::spsample(x = NH, n = 100, type = "random")
plot(NH)
# Plot New Hampshire
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Plot New Hampshire
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Add States for context
plot(States,
add = TRUE)
plot(NH)
sp::degAxis(side = 1)
sp::degAxis(side = 2,las = 2)
plot(NH)
# generate the north arrow type 1
arrow1 <-  layout.north.arrow(type = 1)
# shift the coordinates
# shift = c(x,y) direction
Narrow1 <- maptools::elide(arrow1, shift = c(extent(NH)[2],extent(NH)[3]))
# add north arrow to current NH plot
plot(Narrow1, add = TRUE,col = "black")
# Make north arrow type 2
arrow2 <- layout.north.arrow(type = 2)
# shift the coordinates
# shift = c(x,y) direction
Narrow2 <- maptools::elide(arrow2, shift = c(extent(NH)[1]-0.5,extent(NH)[3]))
# add north arrow to current plot
plot(Narrow2, add = TRUE, col = "blue")
# New Hampshire plot
plot(NH)
# scale bar layer
sb <- layout.scale.bar(height = 0.05)
# shift scale bar
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]-0.5))
# Add to plot
plot(sb_slide, add = TRUE, col = c("white","black"))
# shift scale bar
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]-0.1))
plot(NH)
# scale bar layer
sb <- layout.scale.bar(height = 0.05)
# shift scale bar
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]-0.1))
# Add to plot
plot(sb_slide, add = TRUE, col = c("white","black"))
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1],extent(NH)[3]-0.1),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1],extent(NH)[3]-0.05),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1],extent(NH)[3]-0.05),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1],extent(NH)[3]+0.05),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1],extent(NH)[3]+0.15),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1]+0.01,extent(NH)[3]+0.15),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 50, # distance in km
xy = c(extent(NH)[1]+0.01,extent(NH)[3]+0.15),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,25,50),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1]+0.01,extent(NH)[3]+0.15),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2)
plot(NH)
#d = distance in km
#xy = location where to place scalebar
#type = "bar" or "line"
#divs = how many divisions in bar/line
#below = text below bar
#lonlat =  projection in longitude / latitude?
#label = labels for c(beginning, middle, end)
#adj = label adjustments c(horiz,vertical)
#lwd = width of line
raster::scalebar(d = 100, # distance in km
xy = c(extent(NH)[1]+0.01,extent(NH)[3]+0.15),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0, -0.75),
lwd = 2,
bg = "white")
# Download a map from Google Maps API
# exp = multiplier to change extent
#       values less than 1 - zooms in
#       values greater than 1 - zooms out
# zoom = another parameter to
#       zoom in or out on areas
#     1 = global, 20 = pick out individual trees
# type = Type of image to return
# lonlat = return in crs lonlat?
# rgb - return raster stack with rgb values?
# Avoid weird white space by using using the rgb = TRUE &
# using raster's plotRGB function.
sat <- gmap(x = NH,
exp = 1,
zoom = NULL,
type = "satellite",
lonlat = FALSE,
rgb = TRUE)
plotRGB(sat)
# Download a map from Google Maps API
sat <- gmap(x = NH,
# multiplier to change extent
# values less than 1 - zooms in
# values greater than 1 - zooms out
exp = 1,
# zoom is another parameter to
# zoom in or out on areas
# 1 = world, 20 = pick out individual trees
zoom = NULL,
# Type of image to return
type = "satellite",
# return in coord lonlat
lonlat = FALSE,
# return raster stack with red,green,blue values
rgb = TRUE)
# Project NH into merc projection
NHproj <- sp::spTransform(NH,sp::CRS(sat@crs@projargs))
# Avoid weird white space by using using the rgb = TRUE &
# using raster's plotRGB function.
par(mfrow = c(1,2))
plotRGB(sat)
# mask sat by NH
sat_mask <- raster::mask(sat,NHproj)
plotRGB(sat_mask)
# add states but transform first
plot(sp::spTransform(States,sp::CRS(sat@crs@projargs)),add = TRUE)
plotRGB
# make random points within New Hampshire
randPts <- sp::spsample(x = NH, n = 100, type = "random")
library(raster)
library(sp)
library(dismo)
# make random points within New Hampshire
randPts <- sp::spsample(x = NH, n = 100, type = "random")
NH
knitr::opts_chunk$set(error = TRUE)
library(raster)
library(sp)
library(rgeos)
library(leaflet)
library(dismo)
# Get State boundaries
States <- raster::getData("GADM", country = "United States", level = 1)
# make NH polygon
NH <- States[States$NAME_1 == "New Hampshire",]
# Get State boundaries
States <- raster::getData("GADM", country = "United States", level = 1)
# make NH polygon
NH <- States[States$NAME_1 == "New Hampshire",]
States
NH <- States[States$NAME_1 == "New Hampshire",]
States
States[States$NAME_1 == "New Hampshire",]
# make NH polygon
NH <- States[States$NAME_1 == "New Hampshire",]
knitr::opts_chunk$set(error = TRUE)
library(raster)
library(sp)
library(rgeos)
library(leaflet)
# Get State boundaries
States <- raster::getData("GADM", country = "United States", level = 1)
# make NH polygon
NH <- States[States$NAME_1 == "New Hampshire",]
