plot(NH)
# bring the libraries back
library(raster)
library(sp)
library(rgeos)
# Plot New Hampshire
plot(NH)
plot(randPts,
add = TRUE,
pch = 19)
# Plot New Hampshire
plot(NH)
# Add random points
plot(randPts,
add = TRUE,
pch = 19)
# Plot New Hampshire
plot(NH)
# Add random points
plot(randPts,
add = TRUE,
pch = 19)
# Add States for context
plot(States,
add = TRUE)
randPts
# Plot New Hampshire
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Add States for context
plot(States,
add = TRUE,
col = "gray88")
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Add States for context
plot(States,
ext = extent(NH),
add = TRUE,
col = "gray88")
plot(States,
ext = extent(NH)
)
raster::plot(States,
ext = extent(NH)
)
raster::plot
plot(NH)
sp::layout.north.arrow(type = 1)
plot(NH)
sp::layout.north.arrow(type = 1,add = TRUE)
sp::layout.north.arrow(type = 2)
plot(NH)
plot(layout.north.arrow(type = 2),add = TRUE)
layout.north.arrow(type = 2)
layout.north.arrow(type = 1)
plot(NH)
gridlines(NH)
gridlines(NH,add = TRUE)
plot(NH)
gridlines(NH,add = TRUE)
gridlines(NH)
plot(NH)
x<- gridlines(NH)
plot(x,add = TRUE)
list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(extent(NH)[1],extent(NH)[3]), scale = 400)
plot(NH)
Narrow <-  list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(extent(NH)[1],extent(NH)[3]), scale = 400)
plot(NH)
Narrow <-  list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(extent(NH)[1],extent(NH)[3]), scale = 400)
plot(Narrow, add = TRUE)
Narrow
Narrow <-  list("SpatialPolygons", layout.north.arrow(),
offset = c(extent(NH)[1],extent(NH)[3]), scale = 400)
plot(Narrow, add = TRUE)
list("SpatialPolygons", layout.north.arrow(),
offset = c(extent(NH)[1],extent(NH)[3]), scale = 400)
layout.north.arrow(NH)
layout.north.arrow()
layout.north.arrow
layout.north.arrow(type = 1)
arrow <-  layout.north.arrow(type = 1)
Narrow <- elide(arrow, shift = c(extent(NH)[1],extent(NH)[3]))
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[1],extent(NH)[3]))
plot(NH)
arrow <-  layout.north.arrow(type = 1)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[1],extent(NH)[3]))
plot(Narrow, add = TRUE)
plot(NH)
arrow <-  layout.north.arrow(type = 1)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[1],extent(NH)[4]))
plot(Narrow, add = TRUE)
plot(NH)
arrow <-  layout.north.arrow(type = 1)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE)
plot(NH)
arrow <-  layout.north.arrow(type = 1)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
plot(NH)
arrow <-  layout.north.arrow(type = 2)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
plot(NH)
degAxis(side = 1)
plot(NH)
degAxis(side = 1)
degAxis(side = 2)
plot(NH)
degAxis(side = 1)
degAxis(side = 2,las = 2)
knitr::opts_chunk$set(error = TRUE)
library(raster)
library(sp)
library(rgeos)
library(leaflet)
# Get State boundaries
States <- raster::getData("GADM", country = "United States", level = 1)
# make NH polygon
NH <- States[States$NAME_1 == "New Hampshire",]
# plot a single polygon
plot(NH)
# Detach packages to illustrate error message
detach("package:rgeos",unload = TRUE)
detach("package:raster", unload = TRUE)
detach("package:sp", unload = TRUE)
# plot NH without raster or sp loaded to show error
plot(NH)
# bring the libraries back
library(raster)
library(sp)
# Set the random seed
set.seed(12345)
# make random points within New Hampshire
randPts <- sp::spsample(x = NH, n = 100, type = "random")
plot(NH)
# Plot New Hampshire
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Plot New Hampshire
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Add States for context
plot(States,
add = TRUE)
# Plot New Hampshire
plot(NH)
# add random points
plot(randPts,
add = TRUE,
pch = 19)
# Add States for context
plot(States,
add = TRUE)
plot(NH)
sp::degAxis(side = 1)
sp::degAxis(side = 2,las = 2)
# generate the north arrow
arrow <-  layout.north.arrow(type = 1)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
plot(NH)
# generate the north arrow
arrow <-  layout.north.arrow(type = 1)
Narrow <- maptools::elide(arrow, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
plot(NH)
# generate the north arrow
arrow1 <-  layout.north.arrow(type = 1)
Narrow1 <- maptools::elide(arrow1, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
arrow2 <- layout.north.arrow(type = 2)
Narrow2 <- maptools::elide(arrow2, shift = c(extent(NH)[1],extent(NH)[3]))
plot(Narrow2, add = TRUE, col = "blue")
plot(NH)
# generate the north arrow
arrow1 <-  layout.north.arrow(type = 1)
Narrow1 <- maptools::elide(arrow1, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
arrow2 <- layout.north.arrow(type = 2)
Narrow2 <- maptools::elide(arrow2, shift = c(extent(NH)[1]-1,extent(NH)[3]))
plot(Narrow2, add = TRUE, col = "blue")
plot(NH)
# generate the north arrow
arrow1 <-  layout.north.arrow(type = 1)
Narrow1 <- maptools::elide(arrow1, shift = c(extent(NH)[2],extent(NH)[3]))
plot(Narrow, add = TRUE,col = "black")
arrow2 <- layout.north.arrow(type = 2)
Narrow2 <- maptools::elide(arrow2, shift = c(extent(NH)[1]-0.5,extent(NH)[3]))
plot(Narrow2, add = TRUE, col = "blue")
layout.scale.bar(height = 0.05)
plot(NH)
sb <- layout.scale.bar(height = 0.05)
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]))
plot(NH)
sb <- layout.scale.bar(height = 0.05)
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]))
plot(sb_slide, add = TRUE)
layout.scale.bar
plot(NH)
sb <- layout.scale.bar(height = 0.05)
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]))
plot(sb_slide, add = TRUE)
plot(NH)
sb <- layout.scale.bar(height = 0.05)
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]))
plot(sb_slide, add = TRUE, col = c("white","black"))
plot(NH)
sb <- layout.scale.bar(height = 0.05)
sb_slide <- maptools::elide(sb, shift = c(extent(NH)[1],extent(NH)[3]+0.5))
plot(sb_slide, add = TRUE, col = c("white","black"))
sb_slide
plot(NH)
raster::scalebar(d = 100,
xy = c(extent(NH)[1],extent(NH)[2]),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0.5, -0.5),
lwd = 2)
plot(NH)
raster::scalebar(d = 10000,
xy = c(extent(NH)[1],extent(NH)[2]),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0.5, -0.5),
lwd = 2)
plot(NH)
raster::scalebar(d = 10000,
xy = c(extent(NH)[1],extent(NH)[3]),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0.5, -0.5),
lwd = 2)
c(extent(NH)[1],extent(NH)[3])
plot(NH)
raster::scalebar(d = 100,
xy = c(extent(NH)[1],extent(NH)[3]),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0.5, -0.5),
lwd = 2)
plot(NH)
raster::scalebar(d = 100,
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
type = "bar",
divs = 2,
below = "km",
lonlat = TRUE,
label = c(0,50,100),
adj=c(0.5, -0.5),
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# distance from bar to add labels /ticks
adj=c(0.5, -0.5),
# width of lines
lwd = 2,
col = "red")
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# distance from bar to add labels /ticks
adj=c(0.5, -0.5),
# width of lines
lwd = 2,
col = "red",
fill = "red")
raster::scalebar
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# distance from bar to add labels /ticks
adj=c(0.5, -0.5),
# width of lines
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# distance from bar to add labels /ticks
adj=c(1.5, -0.5),
# width of lines
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# distance from bar to add labels /ticks
adj=c(1.5, -1.5),
# width of lines
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# label adjustments - c(horiz,vertical)
adj=c(0, 1.5),
# width of lines
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# label adjustments - c(horiz,vertical)
adj=c(0, -1),
# width of lines
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# label adjustments - c(horiz,vertical)
adj=c(0, -0.6),
# width of lines
lwd = 2)
plot(NH)
raster::scalebar(d = 100, # distance in km
# location where to place scalebar
xy = c(extent(NH)[1],extent(NH)[3]+0.5),
# Type either 'bar' or 'line'
type = "bar",
# how many divisons in bar/line
divs = 2,
# text below bar
below = "km",
# are the data longitude / latitude
lonlat = TRUE,
# Labels for c(beginning, middle, end)
label = c(0,50,100),
# label adjustments - c(horiz,vertical)
adj=c(0, -0.75),
# width of lines
lwd = 2)
library(dismo)
gmap(NH)
library(dismo)
sat <- gmap(NH)
plot(sat)
gmap
gmap(x = NH,
exp = 2)
sat <- gmap(x = NH,
exp = 2)
plot(sat)
sat <- gmap(x = NH,
exp = 1)
plot(sat)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 1,
# Type of image to return
type = "Satellite)
plot(sat)
library(dismo)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 1,
# Type of image to return
type = "Satellite")
plot(sat)
library(dismo)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 1,
# Type of image to return
type = "Satellite")
plot(sat)
library(dismo)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 1,
# Type of image to return
type = "satellite")
plot(sat)
sat
sat <- gmap(x = NH, style="feature:road.local|element:geometry|hue:0x00ff00|saturation:100&style=feature:landscape|element:geometry|lightness:-100",type = "road")
sat <- gmap(x = NH, style="feature:road.local|element:geometry|hue:0x00ff00|saturation:100&style=feature:landscape|element:geometry|lightness:-100",type = "roadmap")
plot(sat)
sat <- gmap(x = NH, style="feature:road.local|element:geometry|hue:0x00ff00|saturation:100&style=feature:landscape|element:geometry|lightness:-100",type = "roadmap",exp = 0.25)
plot(sat)
sat <- gmap(x = NH, style="feature:road.local|element:geometry|hue:0x00ff00|saturation:100&style=feature:landscape|element:geometry|lightness:-100",type = "roadmap",exp = 0.1)
plot(sat)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 1,
# Type of image to return
type = "satellite")
plot(sat)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 0.1,
# Type of image to return
type = "satellite")
plot(sat)
sat <- gmap(x = NH,
# multiplier to change extent
exp = 0.05,
# Type of image to return
type = "satellite")
plot(sat)
